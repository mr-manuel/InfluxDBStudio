name: .NET Core Desktop - Commit

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build-application:


    strategy:
      matrix:
        configuration: ['Release']
        dotnet-version: ['3.1.426']

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # specify variables
    env:
      Solution_Name: CymaticLabs.InfluxDB.sln
      Project_Path: src\CymaticLabs.InfluxDB.Studio\CymaticLabs.InfluxDB.Studio.csproj

    # checkout project und git clone project
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

#    - name: List installed SDK versions
#      run: dotnet --list-sdks

    - name: Set SDK version
      run: dotnet new globaljson --sdk-version ${{ matrix.dotnet-version }}

    # You can test your matrix by printing the current dotnet version
    - name: Display dotnet version
      run: dotnet --version

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore/Download all missing packages
    - name: NuGet Restore
      run: nuget restore $env:Solution_Name

# not needed?
#    # Restore the application to populate the obj folder with RuntimeIdentifiers
#    - name: Restore the application
#      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
#      env:
#        Configuration: ${{ matrix.configuration }}

#    # Decode the base 64 encoded pfx and save the Signing_Certificate
#    - name: Decode the pfx
#      run: |
#        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
#
#    # Create the app package by building and packaging the Windows Application Packaging project
#    - name: Create the app package
#      #run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#      env:
#        Appx_Bundle: Always
#        Appx_Bundle_Platforms: x86|x64
#        Appx_Package_Build_Mode: StoreUpload
#        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Rename folder
    - name: Rename folder
      run: Rename-Item -Path ".\Release\Release" -NewName "InfluxDBStudio"

    # Upload the files: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: InfluxDBStudio
        path: .\Release
        # default retention 90 days
        retention-days: 30

#    - name: Create ZIP
#      run: Compress-Archive ".\Release\InfluxDBStudio" -DestinationPath ".\InfluxDBStudio.zip"
